{"version":3,"sources":["EncryptMessage.js","ReceivedMessages.js","logo.svg","CustomerDetails.js","SendPublicMessage.js","SendPrivateMessage.js","Txtrs.js","App.js","registerServiceWorker.js","index.js","Web3Helper.js"],"names":["ecies","require","EncryptMessage","props","_this","Object","_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","call","onSendSecretMessage","_ref","_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","mark","_callee","event","private_message","bob_public","public_key","account","encrypt","wrap","_context","prev","next","preventDefault","getPrivateMessage","message","address","Buffer","from","slice","w3","eth","getAccounts","sent","state","methods","alice_send_encrypted_message","toString","send","gasPrice","abrupt","stop","_x","apply","arguments","myChangeHandler","nam","target","name","val","value","err","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","setState","errormessage","_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","sentMessages","react_bootstrap_lib_Panel__WEBPACK_IMPORTED_MODULE_9___default","bsStyle","key","id","className","Heading","Title","componentClass","stage","bob","Body","renderForm","onSubmit","htmlFor","type","placeholder","onChange","React","Component","window","db","rec_state","EC","ec","ReceivedMessages","_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","receivedMessages","keys","getPrivateMessages","response","setUpListeners","fetch","bob_reply","console","log","privateKey","utils","randomHex","ephemPrivKey","keyFromPrivate","ephemPubKey","getPublic","encode","pub_key_readable","localStorage","setItem","accounts","ethereum","enable","getBlockNumber","that","contract","events","allEvents","fromBlock","_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","_callee4","data","_context4","_x2","_x3","get_received_messages_total","users_address","messages_count","messages","index","get_received_message","private_message_addr","plaintext","alice","encrypted_message","private_message_bob_stage_2","ethPrivKey","pub","pk","decrypt","e","push","react__WEBPACK_IMPORTED_MODULE_7___default","mySubmitHandler","map","react_bootstrap_lib_Panel__WEBPACK_IMPORTED_MODULE_8___default","module","exports","__webpack_require__","p","SendPublicMessage","classCallCheck","possibleConstructorReturn","getPrototypeOf","asyncToGenerator","regenerator_default","send_public_message","react_default","defineProperty","Panel_default","_ref2","_callee3","_context3","pm_init","block_number","toBlock","getSentMessages","get_sent_messages_total","get_sent_message","Arts","selectedArt","web3init","getPublicMessages","publicMessages","get_public_message_count","get_public_message_message","get_public_message_sender","sender","SendPublicMessage_SendPublicMessage","SendPrivateMessage_SendPublicMessage","App","BrowserRouter","basename","process","href","Route","exact","path","component","Txtrs","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","concat","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","abi_private_message","Web3","Contract","abi","addr","_web3init","options"],"mappings":"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","file":"static/js/main.49b5d95b.chunk.js","sourcesContent":["import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport {getContract, contract, w3, users_address, getPrivateMessage} from \"./Web3Helper\"\n\nimport ReactDOM from 'react-dom';\nconst ecies = require('eth-ecies')\n\nexport default class EncryptMessage extends React.Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      sentMessages : [],\n      errormessage: ''\n    };\n  }\n  async componentDidMount() {\n    //this.setState({sentMessages: response})\n  }\n  onSendSecretMessage = async (event) => {\n    event.preventDefault();\n    var private_message = getPrivateMessage(this.props.message.address)\n    // the damn library adds the \"0x04\" prevailing byte so we need to slice(2) the hex rep\n    //https://github.com/libertylocked/eth-ecies/blob/master/index.js#L74\n    var bob_public = this.props.message.bob_public;\n    var public_key = Buffer.from( bob_public.slice(2),'hex');\n    var account = await  w3.eth.getAccounts()\n    var encrypt = ecies.encrypt(public_key, this.state.message);\n    var send = await private_message.methods.alice_send_encrypted_message(encrypt.toString('hex')).send({gasPrice:0,from:account[0]});\n    return false;\n  }\n\n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    let err = '';\n    if (nam === \"message\") {\n      if (val ==\"\" ) {\n        err = <strong>Your message can't be blank</strong>;\n      }\n    }\n    this.setState({errormessage: err});\n    this.setState({[nam]: val});\n  }\n  render() {\n            var message = this.props.message;\n            return(\n<Panel bsStyle=\"info\" key={message.id} className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">\n\t\t\t\t\t\t\t\t\t\t{(() => {\n\t\t\t\t\t\t\t\t\t\t\tswitch (message.stage) {\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"1\":   return \"Key request sent.\";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"2\": return \"Recipient has shared one time use encryption keys with you. Time to encrypt and send the message!\";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"3\":  return \"Encrypted Message sent to \"+message.bob;\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"4\":  return \"Encrypted Message received by \"+message.bob;\n\t\t\t\t\t\t\t\t\t\t\t\tdefault:      return \"unknown stage \";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})()}\n\t\t\t\t\t\t</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n                  <p>\n\t\t\t\t\t\t\t\t\t{message.bob}\n                  </p>\n                  <p>\n\t\t\t\t\t\t\t\t\t{message.bob_public}\n                  </p>\n\n\n        {this.renderForm(message)}\n\n            </Panel.Body>\n          </Panel>\n          )\n  }\n  renderForm(message){\n    if(message.stage=='2'){\n      return (\n        <form onSubmit={this.onSendSecretMessage}>\n          <label htmlFor=\"message\">Secret Message</label>\n          <input\n            type='text'\n            name='message'\n            placeholder=\"Secret Message\"\n            onChange={this.myChangeHandler}\n          />\n          <input\n            type='submit'\n          />\n        </form>\n      )\n    }else{\n      return (<span>Message Sent</span>)\n    }\n  }\n}\n\n\n\n\n","import React from 'react';\r\nimport Panel from 'react-bootstrap/lib/Panel'\r\nimport ecies from 'eth-ecies'\r\nimport {getContract, contract, w3, users_address, getPrivateMessage, getBlockNumber} from \"./Web3Helper\"\r\n\r\n\r\n\r\n\r\n\r\nwindow.db = {}\r\nwindow.rec_state = {}\r\n\r\n\r\nconst EC = require(\"elliptic\").ec;\r\n\r\nexport default class ReceivedMessages extends React.Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      receivedMessages: [],\r\n      errormessage: '',\r\n      keys:{}\r\n    };\r\n  }\r\n  \r\n  async fetch(){\r\n    const response = await this.getPrivateMessages()\r\n    this.setState({receivedMessages: response})\r\n  }\r\n  async componentDidMount() {\r\n    await this.setUpListeners();\r\n    await this.fetch();\r\n    window.rec_state = this.state\r\n\r\n\r\n  }\r\n  async private_message_bob_stage_2(private_message){\r\n    var bob_reply = {}\r\n    console.log(\"state2\",this.state);\r\n    var privateKey = w3.utils.randomHex(32)\r\n    const ec = new EC(\"secp256k1\");\r\n    const ephemPrivKey = ec.keyFromPrivate(privateKey);\r\n    const ephemPubKey = ephemPrivKey.getPublic();\r\n    const ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode());\r\n    const pub_key_readable = Buffer.from(ephemPubKey.encode()).toString('hex')\r\n\r\n    var bob_public = pub_key_readable\r\n    bob_reply['bob_public'] = pub_key_readable\r\n\r\n    this.state.keys[pub_key_readable]=privateKey\r\n    window.db[pub_key_readable] = privateKey\r\n    console.log('window.db',window.db);\r\n    window.localStorage.setItem(pub_key_readable, privateKey);\r\n    \r\n\r\n    var accounts = await  w3.eth.getAccounts()\r\n    await window.ethereum.enable()\r\n    var send = await private_message.methods.bob_reply(pub_key_readable).send({gasPrice:0,from:accounts[0]})\r\n    console.log(\"state3\",this.state);\r\n\r\n  }\r\n\r\n  async setUpListeners(){\r\n    var block_number = await getBlockNumber()\r\n    var that = this;\r\n    contract.events.allEvents(\"allEvents\",{\r\n    \r\n        fromBlock: 'latest'\r\n\r\n    },async function(err,data){\r\n      console.log(\"event\", data);\r\n      await that.fetch();\r\n    });\r\n  }\r\n\r\n  async getPrivateMessages() {\r\n\r\n      //set up listeners for new received messages\r\n\r\n\r\n\r\n\r\n\r\n    var messages_count = await contract.methods.get_received_messages_total(users_address).call();\r\n    var messages = []\r\n    for(var index = messages_count-1; index >= 0 ;index-- ){\r\n      var private_message_addr = await contract.methods.get_received_message(users_address,index).call()\r\n\t\t\tvar private_message = getPrivateMessage(private_message_addr)\r\n\r\n\r\n\r\n\r\n\t\t\tvar stage = await private_message.methods.stage().call()\r\n      var plaintext=''\r\n\t\t\tvar stage = await private_message.methods.stage().call()\r\n\t\t\tvar alice = await private_message.methods.alice().call()\r\n\t\t\tvar bob = await private_message.methods.bob().call()\r\n\t\t\tvar bob_public = await private_message.methods.bob_public().call()\r\n      var encrypted_message = await private_message.methods.encrypted_message().call()\r\n\r\n      if (stage == \"1\"){\r\n        this.private_message_bob_stage_2(private_message);\r\n      }\r\n      if(stage == \"3\"){\r\n        //decrypt using bob eey\r\n        const ec = new EC(\"secp256k1\");\r\n        var pub_key_readable = Buffer.from(bob_public,'hex').toString(\"hex\");\r\n        console.log('should be same kesy bob',bob_public, pub_key_readable)\r\n        var ethPrivKey = window.localStorage[pub_key_readable];\r\n        console.log(\"pub_key_readable\",pub_key_readable)\r\n        console.log(\"ethPrivKey\",ethPrivKey)\r\n        console.log(\"encrypted_message\",encrypted_message)\r\n        if(ethPrivKey){\r\n          //try to encrypt and then decrypt (?)\r\n          var pub = Buffer.from(pub_key_readable.slice(2),'hex');\r\n          var encrypt = ecies.encrypt(pub, 'test');\r\n          var pk = ec.keyFromPrivate(ethPrivKey)\r\n          try{\r\n          plaintext = ecies.decrypt(pk , Buffer.from(encrypted_message,'hex')).toString();// XXX REAL ONE\r\n          }catch (e){\r\n          console.log(e);\r\n          }\r\n\r\n          console.log('plaintext2',plaintext);\r\n        }\r\n\r\n      }\r\n\r\n    var message = {plaintext:plaintext,stage:stage,alice:alice,bob:bob, id:index, address: private_message_addr, encrypted_message:encrypted_message, bob_public:bob_public }\r\n      messages.push(message);\r\n\r\n      //var sender = await contract.methods.get_public_message_sender(index).call()\r\n    }\r\n    return messages;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n<div>\r\n      <form onSubmit={this.mySubmitHandler}>\r\n      <p>\r\n      <label htmlFor=\"address\">Ethereum Address</label>\r\n      <input\r\n        type='text'\r\n        name='address'\r\n        placeholder=\"0xSatoshi\"\r\n        onChange={this.myChangeHandler}\r\n      />\r\n      </p>\r\n      <p>\r\n      <label htmlFor=\"message\">Secret Message</label>\r\n      <input\r\n        type='text'\r\n        name='message'\r\n        placeholder=\"Secret Message\"\r\n        onChange={this.myChangeHandler}\r\n      />\r\n      </p>\r\n      <input\r\n        type='submit'\r\n      />\r\n \r\n      {this.state.errormessage}\r\n      </form>\r\n      <p>hi</p>\r\n        { \r\n\r\n\t\t\t\tthis.state.receivedMessages.map(message => \r\n          <Panel bsStyle=\"info\" key={message.id} className=\"centeralign\">\r\n            <Panel.Heading>\r\n              <Panel.Title componentClass=\"h3\">\r\n\t\t\t\t\t\t\t\t\t\t{(() => {\r\n\t\t\t\t\t\t\t\t\t\t\tswitch (message.stage) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"1\":   return \"Key request sent for One Time Use Public Keys.\";\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"2\": return \"Waiting on recieving encrypted message \";\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"3\":  return \"Encrypted Message received\" ;\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"4\":  return \"Encrypted Message received and status = Read\";\r\n\t\t\t\t\t\t\t\t\t\t\t\tdefault:      return \"unknown stage \";\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t})()}\r\n\t\t\t\t\t\t</Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t{message.alice}\r\n\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t{message.plaintext}\r\n\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t{message.encrypted_message}\r\n\r\n\t\t\t\t\t\t\t</p>\r\n            </Panel.Body>\r\n          </Panel>)\r\n        }\r\n</div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component} from 'react';\r\nimport Panel from 'react-bootstrap/lib/Panel'\r\nimport axios from 'axios'\r\n\r\n//This Component is a child Component of Customers Component\r\nexport default class CustomerDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  //Function which is called when the component loads for the first time\r\n  componentDidMount() {\r\n    this.getCustomerDetails(this.props.val)\r\n  }\r\n\r\n  //Function which is called whenver the component is updated\r\n  componentDidUpdate(prevProps) {\r\n\r\n    //get Customer Details only if props has changed\r\n    if (this.props.val !== prevProps.val) {\r\n      this.getCustomerDetails(this.props.val)\r\n    }\r\n  }\r\n\r\n  //Function to Load the customerdetails data from json.\r\n  getCustomerDetails(id) {\r\n    axios.get('assets/samplejson/customer' + id + '.json').then(response => {\r\n      this.setState({customerDetails: response})\r\n    })\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.customerDetails)\r\n      return (<p>Loading Data</p>)\r\n    return (<div className=\"customerdetails\">\r\n      <Panel bsStyle=\"info\" className=\"centeralign\">\r\n        <Panel.Heading>\r\n          <Panel.Title componentClass=\"h3\">{this.state.customerDetails.data.name}</Panel.Title>\r\n        </Panel.Heading>\r\n        <Panel.Body>\r\n          <p>Name : {this.state.customerDetails.data.name}</p>\r\n          <p>Email : {this.state.customerDetails.data.email}</p>\r\n          <p>Phone : {this.state.customerDetails.data.phone}</p>\r\n          <p>City : {this.state.customerDetails.data.city}</p>\r\n          <p>State : {this.state.customerDetails.data.state}</p>\r\n          <p>Country : {this.state.customerDetails.data.country}</p>\r\n          <p>Organization : {this.state.customerDetails.data.organization}</p>\r\n          <p>Job Profile : {this.state.customerDetails.data.jobProfile}</p>\r\n          <p>Additional Info : {this.state.customerDetails.data.additionalInfo}</p>\r\n        </Panel.Body>\r\n      </Panel>\r\n    </div>)\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Panel from 'react-bootstrap/lib/Panel'\r\n\r\nimport {getContract, contract, w3} from \"./Web3Helper\"\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport default class SendPublicMessage extends React.Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: '',\r\n      errormessage: ''\r\n    };\r\n  }\r\n  mySubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    var account = await  w3.eth.getAccounts()\r\n\r\n    var send = await contract.methods.send_public_message(this.state.message).send();//, {from:account}).send({from:account, value:0})\r\n    return false;\r\n  }\r\n\r\n  myChangeHandler = (event) => {\r\n    let nam = event.target.name;\r\n    let val = event.target.value;\r\n    let err = '';\r\n    if (nam === \"message\") {\r\n      if (val ==\"\" ) {\r\n        err = <strong>Your message can't be blank</strong>;\r\n      }\r\n    }\r\n    this.setState({errormessage: err});\r\n    this.setState({[nam]: val});\r\n  }\r\n  render() {\r\n    return (\r\n          <Panel bsStyle=\"info\" className=\"centeralign\">\r\n            <Panel.Heading>\r\n              <Panel.Title componentClass=\"h3\">\r\n              Send Public Message\r\n\r\n\t\t\t\t\t\t</Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body>\r\n              <form onSubmit={this.mySubmitHandler}>\r\n              <input\r\n                type='text'\r\n                name='message'\r\n                onChange={this.myChangeHandler}\r\n              />\r\n              <input\r\n                type='submit'\r\n              />\r\n         \r\n              {this.state.errormessage}\r\n              </form>\r\n            </Panel.Body>\r\n          </Panel>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Panel from 'react-bootstrap/lib/Panel'\r\nimport {getContract, contract, w3, users_address, getPrivateMessage, getBlockNumber} from \"./Web3Helper\"\r\nimport EncryptMessage from './EncryptMessage'\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport default class SendPublicMessage extends React.Component {\r\n  async setUpListeners(){\r\n    var block_number = await getBlockNumber()\r\n    var that = this;\r\n    contract.events.allEvents(\"allEvents\",{\r\n    \r\n        fromBlock: block_number,\r\n        toBlock: 'latest'\r\n\r\n    },async function(err,data){\r\n      console.log(\"LOGGING THAT EVENT PICKED UP NEWS\")\r\n      await that.getSentMessages();\r\n    });\r\n  }\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: '',\r\n      sentMessages : [],\r\n      errormessage: '',\r\n      account:''\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n\t\tconsole.log(\"start send private msg\");\r\n    await this.setUpListeners();\r\n    const response = await this.getSentMessages()\r\n    console.log('send messages response is ',response);\r\n  }\r\n  async getSentMessages() {\r\n    var account = await  w3.eth.getAccounts()\r\n    this.state.account = account;\r\n    var messages_count = await contract.methods.get_sent_messages_total(users_address).call();\r\n    var messages = []\r\n    for(var index = messages_count-1; index >= 0 ;index-- ){\r\n      var private_message_addr = await contract.methods.get_sent_message(users_address,index).call()\r\n\t\t\tvar private_message = getPrivateMessage(private_message_addr)\r\n\t\t\tvar stage = await private_message.methods.stage().call()\r\n\t\t\tvar alice = await private_message.methods.alice().call()\r\n\t\t\tvar bob = await private_message.methods.bob().call()\r\n      var message = {stage:stage,alice:alice,bob:bob, id:index}\r\n      if (stage == \"2\"){\r\n        var bob_public = await private_message.methods.bob_public().call()\r\n        message['bob_public']=bob_public\r\n      }\r\n      message['address']=private_message_addr\r\n      message['id'] = index;\r\n      if(stage==1){\r\n      }\r\n      messages.push(message);\r\n    }\r\n    this.setState({sentMessages: messages})\r\n    return messages;\r\n  };\r\n  mySubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    var account = await  w3.eth.getAccounts()\r\n    var send = await contract.methods.pm_init(this.state.address).send({gasPrice:0,from:account[0]});\r\n    return false;\r\n  }\r\n\r\n  myChangeHandler = (event) => {\r\n    let nam = event.target.name;\r\n    let val = event.target.value;\r\n    let err = '';\r\n    if (nam === \"message\") {\r\n      if (val ==\"\" ) {\r\n        err = <strong>Your message can't be blank</strong>;\r\n      }\r\n    }\r\n    this.setState({errormessage: err});\r\n    this.setState({[nam]: val});\r\n  }\r\n  render() {\r\n    return (\r\n    <div>\r\n    <p>\r\n    hi {this.state.account}\r\n    </p>\r\n      <form onSubmit={this.mySubmitHandler}>\r\n      <div>\r\n      <label htmlFor=\"address\">Ethereum Address</label>\r\n      <input\r\n        type='text'\r\n        name='address'\r\n        placeholder=\"0xSatoshi\"\r\n        onChange={this.myChangeHandler}\r\n      />\r\n      </div>\r\n      <input\r\n        type='submit'\r\n      />\r\n \r\n      {this.state.errormessage}\r\n      </form>\r\n        <div>\r\n        { this.state.sentMessages.map(message => \r\n      <EncryptMessage message={message} key={message.id}/>\r\n          \r\n          )\r\n        }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport Panel from 'react-bootstrap/lib/Panel'\r\nimport Button from 'react-bootstrap/lib/Button'\r\nimport CustomerDetails from './CustomerDetails'\r\nimport SendPublicMessage from \"./SendPublicMessage\"\r\nimport SendPrivateMessage from './SendPrivateMessage'\r\nimport ReceivedMessages from './ReceivedMessages'\r\n\r\nimport {getContract, contract, web3init} from \"./Web3Helper\"\r\n\r\nexport default class Arts extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      selectedArt: 1\r\n    }\r\n  }\r\n\r\n  //function which is called the first time the component loads\r\n  async componentDidMount() {\r\n    await web3init();\r\n\r\n    const response = await this.getPublicMessages()\r\n    console.log('response is ',response);\r\n    this.setState({publicMessages: {\"data\":response}})\r\n  }\r\n\r\n  //Function to get the Art Data from json\r\n  async getPublicMessages() {\r\n    var messages_count = await contract.methods.get_public_message_count().call();\r\n    console.log(\"messages count\", messages_count);\r\n    var messages = []\r\n    for(var index = messages_count-1; index >= 0 ;index-- ){\r\n      console.log(\"index is\", index)\r\n      var message = await contract.methods.get_public_message_message(index).call()\r\n      var sender = await contract.methods.get_public_message_sender(index).call()\r\n      messages.push({message:message, sender:sender, id:index})\r\n    }\r\n    return messages;\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.publicMessages)\r\n      return (<p>Loading data</p>)\r\n    return (<div className=\"addmargin\">\r\n      <div className=\"col-md-4\">\r\n      <div>\r\n      <SendPublicMessage />\r\n      </div>\r\n        {\r\n\r\n          this.state.publicMessages.data.map(message => <Panel bsStyle=\"info\" key={message.id} className=\"centeralign\">\r\n            <Panel.Heading>\r\n              <Panel.Title componentClass=\"h3\">{message.message}</Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body>\r\n              <p>{message.sender}</p>\r\n            </Panel.Body>\r\n          </Panel>)\r\n        }\r\n        </div>\r\n      <div className=\"col-md-4\">\r\n      <p>Send Private Message</p>\r\n      <SendPrivateMessage />\r\n      </div>\r\n      <div className=\"col-md-4\">\r\n      <p>Incoming Private Messages</p>\r\n      <ReceivedMessages />\r\n      </div>\r\n    </div>)\r\n  }\r\n\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Txtrs from './Txtrs'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    console.log(\"Host URL\"+process.env.PUBLIC_URL);\r\n    return (\r\n\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">Txt.rs</h1>\r\n          <h3 className=\"App-subtitle\">Connect <a href=\"http://metamask.io\" target=\"_blank\">Metamask.io</a> to a new network:</h3>\r\n          <h2 className=\"App-subtitle\">http://chain.txt.rs:8545/</h2>\r\n        </header>\r\n       <Route exact path='/' component={Txtrs} />\r\n      </div>\r\n    </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","import Web3 from 'web3'\r\n\r\n\r\nimport abi from './abi_txtrs.json'\r\nimport abi_private_message from './abi_private_message.json'\r\nconsole.log(abi_private_message);\r\n\r\nconst EC = require(\"elliptic\").ec;\r\nconst ec = new EC(\"secp256k1\");\r\nexport var w3 = new Web3(window.ethereum);\r\nvar contract_address = \"0x96a375eb89230e1fdb9e721e86aed67629faa40c\";\r\n  \r\nexport var users_address;\r\n\r\nwindow.w3 = w3;\r\n\r\nexport const  contract =  new w3.eth.Contract(abi, contract_address);\r\n\r\nexport function getContract(){\r\n  return contract; \r\n}\r\nexport function getPrivateMessage(addr){\r\n\treturn  new w3.eth.Contract(abi_private_message, addr);\r\n}\r\nexport function getBlockNumber(addr){\r\n\treturn  new w3.eth.getBlockNumber();\r\n}\r\n\r\nexport async function web3init(){\r\n  await window.ethereum.enable();//'https://rpc.goerli.mudit.blog/');\r\n  var account = await  w3.eth.getAccounts()\r\n  contract.options.from=account[0]\r\n\tusers_address = account[0];\r\n}\r\n\r\n"],"sourceRoot":""}