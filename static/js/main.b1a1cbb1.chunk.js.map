{"version":3,"sources":["EncryptMessage.js","ReceivedMessages.js","logo.svg","CustomerDetails.js","SendPublicMessage.js","PublicMessages.js","SendPrivateMessage.js","Txtrs.js","App.js","registerServiceWorker.js","index.js","Web3Helper.js"],"names":["ecies","require","EncryptMessage","props","_this","Object","_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","call","onSendSecretMessage","_ref","_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","mark","_callee","event","private_message","bob_public","public_key","account","encrypt","wrap","_context","prev","next","preventDefault","getPrivateMessage","state","message","address","Buffer","from","slice","w3","eth","getAccounts","sent","methods","alice_send_encrypted_message","toString","send","gasPrice","abrupt","stop","_x","apply","arguments","myChangeHandler","nam","target","name","val","value","err","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","setState","errormessage","_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","console","log","react_bootstrap_lib_Panel__WEBPACK_IMPORTED_MODULE_9___default","bsStyle","key","id","className","Heading","Title","componentClass","stage","bob","Body","renderForm","onSubmit","htmlFor","type","placeholder","onChange","React","Component","window","db","rec_state","EC","ec","ReceivedMessages","_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","receivedMessages","keys","getPrivateMessages","response","setUpListeners","fetch","bob_reply","privateKey","utils","randomHex","ephemPrivKey","keyFromPrivate","ephemPubKey","getPublic","encode","pub_key_readable","localStorage","setItem","accounts","ethereum","enable","getBlockNumber","that","contract","events","allEvents","fromBlock","_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","_callee4","data","_context4","_x2","_x3","get_received_messages_total","users_address","messages_count","messages","index","get_received_message","private_message_addr","plaintext","alice","encrypted_message","private_message_bob_stage_2","ethPrivKey","pub","pk","decrypt","e","push","react__WEBPACK_IMPORTED_MODULE_7___default","mySubmitHandler","map","react_bootstrap_lib_Panel__WEBPACK_IMPORTED_MODULE_8___default","module","exports","__webpack_require__","p","SendPublicMessage","classCallCheck","possibleConstructorReturn","getPrototypeOf","asyncToGenerator","regenerator_default","send_public_message","react_default","defineProperty","Panel_default","PublicMessages","publicMessages","getPublicMessages","get_public_message_count","get_public_message_message","get_public_message_sender","sender","_ref2","_callee3","_context3","pm_init","sentMessages","block_number","toBlock","getSentMessages","get_sent_messages_total","get_sent_message","Arts","web3init","counter","SendPublicMessage_SendPublicMessage","PublicMessages_PublicMessages","SendPrivateMessage_SendPublicMessage","App","BrowserRouter","basename","process","href","Route","exact","path","component","Txtrs","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","concat","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","abi_private_message","Web3","Contract","abi","addr","_web3init","options"],"mappings":"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","file":"static/js/main.b1a1cbb1.chunk.js","sourcesContent":["import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport {getContract, contract, w3, users_address, getPrivateMessage} from \"./Web3Helper\"\n\nimport ReactDOM from 'react-dom';\nconst ecies = require('eth-ecies')\n\nexport default class EncryptMessage extends React.Component {\n\tconstructor(props) {\n    super(props);\n    console.log(\"PROPS\",props);\n    this.state = {\n      message: props.message,\n      errormessage: props.message\n    };\n  }\n  async componentDidMount() {\n  }\n  onSendSecretMessage = async (event) => {\n    event.preventDefault();\n    var private_message = getPrivateMessage(this.state.message.address)\n    // the damn library adds the \"0x04\" prevailing byte so we need to slice(2) the hex rep\n    //https://github.com/libertylocked/eth-ecies/blob/master/index.js#L74\n    var bob_public = this.state.message.bob_public;\n    var public_key = Buffer.from( bob_public.slice(2),'hex');\n    var account = await  w3.eth.getAccounts()\n    var encrypt = ecies.encrypt(public_key, this.state.message);\n    var send = await private_message.methods.alice_send_encrypted_message(encrypt.toString('hex')).send({gasPrice:0,from:account[0]});\n    return false;\n  }\n\n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    let err = '';\n    if (nam === \"message\") {\n      if (val ==\"\" ) {\n        err = <strong>Your message can't be blank</strong>;\n      }\n    }\n    this.setState({errormessage: err});\n    this.setState({[nam]: val});\n  }\n  render() {\n            var message = this.state.message;\n            console.log(\"MESSAGE\",message);\n            return(\n<Panel bsStyle=\"info\" key={message.id} className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">\n\t\t\t\t\t\t\t\t\t\t{(() => {\n\t\t\t\t\t\t\t\t\t\t\tswitch (message.stage) {\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"1\":   return \"Key request sent.\";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"2\": return \"Recipient has shared one time use encryption keys with you. Time to encrypt and send the message!\";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"3\":  return \"Encrypted Message sent to \"+message.bob;\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"4\":  return \"Encrypted Message received by \"+message.bob;\n\t\t\t\t\t\t\t\t\t\t\t\tdefault:      return \"unknown stage \";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})()}\n\t\t\t\t\t\t</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n                  <p>\n\t\t\t\t\t\t\t\t\t{message.bob}\n                  </p>\n                  <p>\n\t\t\t\t\t\t\t\t\t{message.bob_public}\n                  </p>\n\n\n        {this.renderForm(message)}\n\n            </Panel.Body>\n          </Panel>\n          )\n  }\n  renderForm(message){\n    if(message.stage=='2'){\n      return (\n        <form onSubmit={this.onSendSecretMessage}>\n          <label htmlFor=\"message\">Secret Message</label>\n          <input\n            type='text'\n            name='message'\n            placeholder=\"Secret Message\"\n            onChange={this.myChangeHandler}\n          />\n          <input\n            type='submit'\n          />\n        </form>\n      )\n    }else{\n      return (<span>Message Sent</span>)\n    }\n  }\n}\n\n\n\n\n","import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport ecies from 'eth-ecies'\nimport {getContract, contract, w3, users_address, getPrivateMessage, getBlockNumber} from \"./Web3Helper\"\n\n\n\n\n\nwindow.db = {}\nwindow.rec_state = {}\n\n\nconst EC = require(\"elliptic\").ec;\n\nexport default class ReceivedMessages extends React.Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      receivedMessages: [],\n      errormessage: '',\n      keys:{}\n    };\n  }\n  \n  async fetch(){\n    const response = await this.getPrivateMessages()\n    this.setState({receivedMessages: response})\n  }\n  async componentDidMount() {\n    await this.setUpListeners();\n    await this.fetch();\n    window.rec_state = this.state\n\n\n  }\n  async private_message_bob_stage_2(private_message){\n    var bob_reply = {}\n    console.log(\"state2\",this.state);\n    var privateKey = w3.utils.randomHex(32)\n    const ec = new EC(\"secp256k1\");\n    const ephemPrivKey = ec.keyFromPrivate(privateKey);\n    const ephemPubKey = ephemPrivKey.getPublic();\n    const ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode());\n    const pub_key_readable = Buffer.from(ephemPubKey.encode()).toString('hex')\n\n    var bob_public = pub_key_readable\n    bob_reply['bob_public'] = pub_key_readable\n\n    this.state.keys[pub_key_readable]=privateKey\n    window.db[pub_key_readable] = privateKey\n    console.log('window.db',window.db);\n    window.localStorage.setItem(pub_key_readable, privateKey);\n    \n\n    var accounts = await  w3.eth.getAccounts()\n    await window.ethereum.enable()\n    var send = await private_message.methods.bob_reply(pub_key_readable).send({gasPrice:0,from:accounts[0]})\n    console.log(\"state3\",this.state);\n\n  }\n\n  async setUpListeners(){\n    var block_number = await getBlockNumber()\n    var that = this;\n    contract.events.allEvents(\"allEvents\",{\n    \n        fromBlock: 'latest'\n\n    },async function(err,data){\n      console.log(\"event\", data);\n      await that.fetch();\n    });\n  }\n\n  async getPrivateMessages() {\n\n      //set up listeners for new received messages\n\n\n\n\n\n    var messages_count = await contract.methods.get_received_messages_total(users_address).call();\n    var messages = []\n    for(var index = messages_count-1; index >= 0 ;index-- ){\n      var private_message_addr = await contract.methods.get_received_message(users_address,index).call()\n\t\t\tvar private_message = getPrivateMessage(private_message_addr)\n\n\n\n\n\t\t\tvar stage = await private_message.methods.stage().call()\n      var plaintext=''\n\t\t\tvar alice = await private_message.methods.alice().call()\n\t\t\tvar bob = await private_message.methods.bob().call()\n\t\t\tvar bob_public = await private_message.methods.bob_public().call()\n      var encrypted_message = await private_message.methods.encrypted_message().call()\n\n      if (stage == \"1\"){\n        this.private_message_bob_stage_2(private_message);\n      }\n      if(stage == \"3\"){\n        //decrypt using bob eey\n        const ec = new EC(\"secp256k1\");\n        var pub_key_readable = Buffer.from(bob_public,'hex').toString(\"hex\");\n        console.log('should be same kesy bob',bob_public, pub_key_readable)\n        var ethPrivKey = window.localStorage[pub_key_readable];\n        if(ethPrivKey){\n          //try to encrypt and then decrypt (?)\n          var pub = Buffer.from(pub_key_readable.slice(2),'hex');\n          var encrypt = ecies.encrypt(pub, 'test');\n          var pk = ec.keyFromPrivate(ethPrivKey)\n          try{\n          plaintext = ecies.decrypt(pk , Buffer.from(encrypted_message,'hex')).toString();// XXX REAL ONE\n          }catch (e){\n          console.log(e);\n          }\n\n          console.log('plaintext2',plaintext);\n        }\n\n      }\n\n    var message = {plaintext:plaintext,stage:stage,alice:alice,bob:bob, id:index, address: private_message_addr, encrypted_message:encrypted_message, bob_public:bob_public }\n      messages.push(message);\n\n      //var sender = await contract.methods.get_public_message_sender(index).call()\n    }\n    return messages;\n  };\n\n  render() {\n    return (\n<div>\n      <form onSubmit={this.mySubmitHandler}>\n      <p>\n      <label htmlFor=\"address\">Ethereum Address</label>\n      <input\n        type='text'\n        name='address'\n        placeholder=\"0xSatoshi\"\n        onChange={this.myChangeHandler}\n      />\n      </p>\n      <p>\n      <label htmlFor=\"message\">Secret Message</label>\n      <input\n        type='text'\n        name='message'\n        placeholder=\"Secret Message\"\n        onChange={this.myChangeHandler}\n      />\n      </p>\n      <input\n        type='submit'\n      />\n \n      {this.state.errormessage}\n      </form>\n      <p>hi</p>\n        { \n\n\t\t\t\tthis.state.receivedMessages.map(message => \n          <Panel bsStyle=\"info\" key={message.id} className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">\n                      <div>hiboo</div>\n\t\t\t\t\t\t\t\t\t\t\t<p>stage : {message.stage} </p>\n\t\t\t\t\t\t\t\t\t\t{(() => {\n\t\t\t\t\t\t\t\t\t\t\tswitch (message.stage) {\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"1\":   return \"Key request sent for One Time Use Public Keys.\";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"2\": return \"Waiting on recieving encrypted message \";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"3\":  return \"Encrypted Message received\" ;\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"4\":  return \"Encrypted Message received and status = Read\";\n\t\t\t\t\t\t\t\t\t\t\t\tdefault:      return \"unknown stage \";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})()}\n\t\t\t\t\t\t</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{message.alice}\n\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{message.plaintext}\n\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{message.encrypted_message}\n\n\t\t\t\t\t\t\t</p>\n            </Panel.Body>\n          </Panel>)\n        }\n</div>\n    );\n  }\n\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport axios from 'axios'\n\n//This Component is a child Component of Customers Component\nexport default class CustomerDetails extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  //Function which is called when the component loads for the first time\n  componentDidMount() {\n    this.getCustomerDetails(this.props.val)\n  }\n\n  //Function which is called whenver the component is updated\n  componentDidUpdate(prevProps) {\n\n    //get Customer Details only if props has changed\n    if (this.props.val !== prevProps.val) {\n      this.getCustomerDetails(this.props.val)\n    }\n  }\n\n  //Function to Load the customerdetails data from json.\n  getCustomerDetails(id) {\n    axios.get('assets/samplejson/customer' + id + '.json').then(response => {\n      this.setState({customerDetails: response})\n    })\n  };\n\n  render() {\n    if (!this.state.customerDetails)\n      return (<p>Loading Data</p>)\n    return (<div className=\"customerdetails\">\n      <Panel bsStyle=\"info\" className=\"centeralign\">\n        <Panel.Heading>\n          <Panel.Title componentClass=\"h3\">{this.state.customerDetails.data.name}</Panel.Title>\n        </Panel.Heading>\n        <Panel.Body>\n          <p>Name : {this.state.customerDetails.data.name}</p>\n          <p>Email : {this.state.customerDetails.data.email}</p>\n          <p>Phone : {this.state.customerDetails.data.phone}</p>\n          <p>City : {this.state.customerDetails.data.city}</p>\n          <p>State : {this.state.customerDetails.data.state}</p>\n          <p>Country : {this.state.customerDetails.data.country}</p>\n          <p>Organization : {this.state.customerDetails.data.organization}</p>\n          <p>Job Profile : {this.state.customerDetails.data.jobProfile}</p>\n          <p>Additional Info : {this.state.customerDetails.data.additionalInfo}</p>\n        </Panel.Body>\n      </Panel>\n    </div>)\n  }\n}\n","import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\n\nimport {getContract, contract, w3} from \"./Web3Helper\"\nimport ReactDOM from 'react-dom';\n\nexport default class SendPublicMessage extends React.Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      errormessage: ''\n    };\n  }\n  mySubmitHandler = async (event) => {\n    event.preventDefault();\n    var account = await  w3.eth.getAccounts()\n\n    var send = await contract.methods.send_public_message(this.state.message).send();//, {from:account}).send({from:account, value:0})\n    return false;\n  }\n\n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    let err = '';\n    if (nam === \"message\") {\n      if (val ==\"\" ) {\n        err = <strong>Your message can't be blank</strong>;\n      }\n    }\n    this.setState({errormessage: err});\n    this.setState({[nam]: val});\n  }\n  render() {\n    return (\n          <Panel bsStyle=\"info\" className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">\n              Send Public Message\n\n\t\t\t\t\t\t</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n              <form onSubmit={this.mySubmitHandler}>\n              <input\n                type='text'\n                name='message'\n                onChange={this.myChangeHandler}\n              />\n              <input\n                type='submit'\n              />\n         \n              {this.state.errormessage}\n              </form>\n            </Panel.Body>\n          </Panel>\n    );\n  }\n}\n\n\n\n","import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport ecies from 'eth-ecies'\n\n//import {getContract, contract, w3, users_address, getPrivateMessage, getBlockNumber} from \"./Web3Helper\"\n\n\nimport {getContract, contract, web3init, getBlockNumber} from \"./Web3Helper\"\n\nexport default class PublicMessages extends React.Component {\n\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      publicMessages:{\n        data: []\n      }\n    };\n  }\n  \n  async setUpListeners(){\n    var block_number = await getBlockNumber()\n    var that = this;\n    contract.events.allEvents(\"allEvents\",{\n    \n        fromBlock: 'latest'\n\n    },async function(err,data){\n      console.log(\"event\", data);\n      await that.fetch();\n    });\n  }\n\n\n  async fetch(){\n    const response = await this.getPublicMessages()\n    this.setState({publicMessages: {\"data\":response}})\n  }\n\n  async componentDidMount() {\n    await this.fetch()\n    await this.setUpListeners();\n  }\n\n  async getPublicMessages() {\n    var messages_count = await contract.methods.get_public_message_count().call();\n    var messages = []\n    for(var index = messages_count-1; index >= 0 ;index-- ){\n      var message = await contract.methods.get_public_message_message(index).call()\n      var sender = await contract.methods.get_public_message_sender(index).call()\n      messages.push({message:message, sender:sender, id:index})\n    }\n    return messages;\n  };\n\n\n  render(){\n          const elements = ['a','b','c'];\n          console.log(\"HERE\");\n          console.log(this.state.publicMessages);\n        return (\n          <div>\n          {\n          this.state.publicMessages.data.map((message,index) => <Panel bsStyle=\"info\" key={message.id} className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">{message.message}</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n              <p>{message.sender}</p>\n            </Panel.Body>\n          </Panel>)\n        \n          }\n        </div>\n        )\n\n\n  }\n  }\n","import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport {getContract, contract, w3, users_address, getPrivateMessage, getBlockNumber} from \"./Web3Helper\"\nimport EncryptMessage from './EncryptMessage'\n\nimport ReactDOM from 'react-dom';\n\nexport default class SendPublicMessage extends React.Component {\n  async setUpListeners(){\n    var block_number = await getBlockNumber()\n    var that = this;\n    contract.events.allEvents(\"allEvents\",{\n    \n        fromBlock: block_number,\n        toBlock: 'latest'\n\n    },async function(err,data){\n      console.log(\"LOGGING THAT EVENT PICKED UP NEWS\")\n      await that.getSentMessages();\n    });\n  }\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      sentMessages : [],\n      errormessage: '',\n      account:''\n    };\n  }\n  async componentDidMount() {\n\t\tconsole.log(\"start send private msg\");\n    await this.setUpListeners();\n    const response = await this.getSentMessages()\n    console.log('send messages response is ',response);\n  }\n  async getSentMessages() {\n    var account = await  w3.eth.getAccounts()\n    this.state.account = account;\n    var messages_count = await contract.methods.get_sent_messages_total(users_address).call();\n    var messages = []\n    for(var index = messages_count-1; index >= 0 ;index-- ){\n      var private_message_addr = await contract.methods.get_sent_message(users_address,index).call()\n\t\t\tvar private_message = getPrivateMessage(private_message_addr)\n\t\t\tvar stage = await private_message.methods.stage().call()\n\t\t\tvar alice = await private_message.methods.alice().call()\n\t\t\tvar bob = await private_message.methods.bob().call()\n      var message = {stage:stage,alice:alice,bob:bob, id:index}\n      if (stage == \"2\"){\n        var bob_public = await private_message.methods.bob_public().call()\n        message['bob_public']=bob_public\n      }\n      message['address']=private_message_addr\n      message['id'] = index;\n      if(stage==1){\n      }\n      messages.push(message);\n    }\n    this.setState({sentMessages: messages})\n    return messages;\n  };\n  mySubmitHandler = async (event) => {\n    event.preventDefault();\n    var account = await  w3.eth.getAccounts()\n    var send = await contract.methods.pm_init(this.state.address).send({gasPrice:0,from:account[0]});\n    return false;\n  }\n\n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    let err = '';\n    if (nam === \"message\") {\n      if (val ==\"\" ) {\n        err = <strong>Your message can't be blank</strong>;\n      }\n    }\n    this.setState({errormessage: err});\n    this.setState({[nam]: val});\n  }\n  render() {\n    console.log(\"RENDER\",this.state.sentMessages);\n    return (\n    <div>\n    <p>\n    hi there {this.state.account}\n    </p>\n      <form onSubmit={this.mySubmitHandler}>\n      <div>\n      <label htmlFor=\"address\">Ethereum Address</label>\n      <input\n        type='text'\n        name='address'\n        placeholder=\"0xSatoshi\"\n        onChange={this.myChangeHandler}\n      />\n      </div>\n      <input\n        type='submit'\n      />\n \n      {this.state.errormessage}\n      </form>\n        <div>\n        { this.state.sentMessages.map(message => \n      <EncryptMessage message={message} key={message.id}/>\n          \n          )\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\n","import React, {Component} from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport Button from 'react-bootstrap/lib/Button'\nimport CustomerDetails from './CustomerDetails'\nimport SendPublicMessage from \"./SendPublicMessage\"\nimport PublicMessages from \"./PublicMessages\"\nimport SendPrivateMessage from './SendPrivateMessage'\nimport ReceivedMessages from './ReceivedMessages'\n\nimport {getContract, contract, web3init} from \"./Web3Helper\"\n\nexport default class Arts extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n  }\n\n  //function which is called the first time the component loads\n  async componentDidMount() {\n    await web3init();\n\n    const response = await this.getPublicMessages()\n    console.log('response is ',response);\n    this.setState({publicMessages: {\"data\":response}})\n  }\n\n  //Function to get the Art Data from json\n  async getPublicMessages() {\n    var messages_count = await contract.methods.get_public_message_count().call();\n    console.log(\"messages count\", messages_count);\n    var messages = []\n    var counter=0;\n    for(var index = messages_count-1; index >= 0 ;index-- ){\n      counter+=1;\n      if(counter ==5){break;}\n      console.log(\"index is\", index)\n      var message = await contract.methods.get_public_message_message(index).call()\n      var sender = await contract.methods.get_public_message_sender(index).call()\n      messages.push({message:message, sender:sender, id:index})\n    }\n    return messages;\n  };\n\n  render() {\n    if (!this.state.publicMessages)\n      return (<p>Loading data</p>)\n    return (<div className=\"addmargin\">\n      <div className=\"col-md-4\">\n      <div>\n      <SendPublicMessage />\n      <PublicMessages />\n      </div>\n        </div>\n      <div className=\"col-md-4\">\n      <p>Send Private Message</p>\n      <SendPrivateMessage />\n      </div>\n      <div className=\"col-md-4\">\n      <p>Incoming Private Messages</p>\n      <ReceivedMessages />\n      </div>\n    </div>)\n  }\n\n}\n\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Txtrs from './Txtrs'\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\n\n\nclass App extends Component {\n  render() {\n    console.log(\"Host URL\"+process.env.PUBLIC_URL);\n    return (\n\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Txt.rs.2.1</h1>\n          <h3 className=\"App-subtitle\">Connect <a href=\"http://metamask.io\" target=\"_blank\">Metamask.io</a> to the MaticV3 testnet</h3>\n          <h4 className=\"App-subtitle\"> https://testnetv3.matic.network/ </h4> \n        </header>\n       <Route exact path='/' component={Txtrs} />\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","import Web3 from 'web3'\n\n\nimport abi from './abi_txtrs.json'\nimport abi_private_message from './abi_private_message.json'\nconsole.log(abi_private_message);\n\nconst EC = require(\"elliptic\").ec;\nconst ec = new EC(\"secp256k1\");\nexport var w3 = new Web3(window.ethereum);\nvar contract_address = \"0xA8ADF136F81AD056448ec5Be5BAED18c8a785fBa\";\n  \nexport var users_address;\n\nwindow.w3 = w3;\n\nexport const  contract =  new w3.eth.Contract(abi, contract_address);\n\nexport function getContract(){\n  return contract; \n}\nexport function getPrivateMessage(addr){\n\treturn  new w3.eth.Contract(abi_private_message, addr);\n}\nexport function getBlockNumber(addr){\n\treturn  new w3.eth.getBlockNumber();\n}\n\nexport async function web3init(){\n  await window.ethereum.enable();//'https://rpc.goerli.mudit.blog/');\n  var account = await  w3.eth.getAccounts()\n  contract.options.from=account[0]\n\tusers_address = account[0];\n}\n\n"],"sourceRoot":""}