{"version":3,"sources":["EncryptMessage.js","ReceivedMessages.js","logo.svg","CustomerDetails.js","SendPublicMessage.js","PublicMessages.js","SendPrivateMessage.js","Txtrs.js","App.js","registerServiceWorker.js","index.js","Web3Helper.js"],"names":["ecies","require","EncryptMessage","props","_this","Object","_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","call","onSendSecretMessage","_ref","_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","mark","_callee","event","private_message","bob_public","public_key","account","encrypt","wrap","_context","prev","next","preventDefault","getPrivateMessage","state","message","address","Buffer","from","slice","w3","eth","getAccounts","sent","secret_message","methods","alice_send_encrypted_message","toString","send","gasPrice","abrupt","stop","_x","apply","arguments","myChangeHandler","setState","target","value","console","log","errormessage","bind","_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","react__WEBPACK_IMPORTED_MODULE_9___default","createElement","react_bootstrap_lib_Panel__WEBPACK_IMPORTED_MODULE_10___default","bsStyle","key","id","className","Heading","Title","componentClass","stage","bob","Body","renderForm","onSubmit","htmlFor","type","name","placeholder","onChange","React","Component","window","db","rec_state","EC","ec","ReceivedMessages","_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","receivedMessages","keys","getPrivateMessages","response","setUpListeners","fetch","bob_reply","privateKey","utils","randomHex","ephemPrivKey","keyFromPrivate","ephemPubKey","getPublic","encode","pub_key_readable","localStorage","setItem","accounts","ethereum","enable","getBlockNumber","that","contract","events","allEvents","fromBlock","_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","_callee4","err","data","_context4","_x2","_x3","get_received_messages_total","users_address","messages_count","messages","index","get_received_message","private_message_addr","plaintext","alice","encrypted_message","private_message_bob_stage_2","ethPrivKey","pub","pk","decrypt","e","push","react__WEBPACK_IMPORTED_MODULE_7___default","mySubmitHandler","map","react_bootstrap_lib_Panel__WEBPACK_IMPORTED_MODULE_8___default","module","exports","__webpack_require__","p","SendPublicMessage","classCallCheck","possibleConstructorReturn","getPrototypeOf","asyncToGenerator","regenerator_default","send_public_message","nam","val","react_default","defineProperty","Panel_default","PublicMessages","publicMessages","getPublicMessages","get_public_message_count","get_public_message_message","get_public_message_sender","sender","_ref2","_callee3","_context3","pm_init","sentMessages","block_number","toBlock","getSentMessages","get_sent_messages_total","get_sent_message","Arts","web3init","counter","SendPublicMessage_SendPublicMessage","PublicMessages_PublicMessages","SendPrivateMessage_SendPublicMessage","App","BrowserRouter","basename","process","href","Route","exact","path","component","Txtrs","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","concat","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","abi_private_message","Web3","Contract","abi","addr","_web3init","options"],"mappings":"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","file":"static/js/main.f88e1899.chunk.js","sourcesContent":["import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport {getContract, contract, w3, users_address, getPrivateMessage} from \"./Web3Helper\"\n\nimport ReactDOM from 'react-dom';\nconst ecies = require('eth-ecies')\n\nexport default class EncryptMessage extends React.Component {\n\tconstructor(props) {\n    super(props);\n    console.log(\"PROPS\",props);\n    this.state = {\n      message: props.message,\n      errormessage: props.message\n    };\n    this.onSendSecretMessage = this.onSendSecretMessage.bind(this);\n\n  }\n  async componentDidMount() {\n  }\n  onSendSecretMessage = async (event) => {\n    event.preventDefault();\n    var private_message = getPrivateMessage(this.state.message.address)\n    // the damn library adds the \"0x04\" prevailing byte so we need to slice(2) the hex rep\n    //https://github.com/libertylocked/eth-ecies/blob/master/index.js#L74\n    var bob_public = this.state.message.bob_public;\n    var public_key = Buffer.from( bob_public.slice(2),'hex');\n    var account = await  w3.eth.getAccounts()\n    var encrypt = ecies.encrypt(public_key, this.state.secret_message);\n    var send = await private_message.methods.alice_send_encrypted_message(encrypt.toString('hex')).send({gasPrice:0,from:account[0]});\n    return false;\n  }\n\n  myChangeHandler = (event) => {\n    this.setState({secret_message: event.target.value});\n\n    return;\n    let nam = event.target.name;\n    let val = event.target.value;\n    let err = '';\n    if (nam === \"message\") {\n      if (val ==\"\" ) {\n        err = <strong>Your message can't be blank</strong>;\n      }\n    }\n    this.setState({errormessage: err});\n    this.setState({[nam]: val});\n  }\n  render() {\n            var message = this.state.message;\n            console.log(\"MESSAGE\",message);\n            return(\n<Panel bsStyle=\"info\" key={message.id} className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">\n\t\t\t\t\t\t\t\t\t\t{(() => {\n\t\t\t\t\t\t\t\t\t\t\tswitch (message.stage) {\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"1\":   return \"Key request sent.\";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"2\": return \"Recipient has shared one time use encryption keys with you. Time to encrypt and send the message!\";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"3\":  return \"Encrypted Message sent to \"+message.bob;\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"4\":  return \"Encrypted Message received by \"+message.bob;\n\t\t\t\t\t\t\t\t\t\t\t\tdefault:      return \"unknown stage \";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})()}\n\t\t\t\t\t\t</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n                  <p>\n\t\t\t\t\t\t\t\t\t{message.bob}\n                  </p>\n                  <p>\n\t\t\t\t\t\t\t\t\t{message.bob_public}\n                  </p>\n\n\n        {this.renderForm(message)}\n\n            </Panel.Body>\n          </Panel>\n          )\n  }\n  renderForm(message){\n    if(message.stage=='2'){\n      return (\n        <form onSubmit={this.onSendSecretMessage}>\n          <label htmlFor=\"message\">Secret Message</label>\n          <input\n            type='text'\n            name='message'\n            placeholder=\"Secret Message\"\n            value={this.state.secret_message}\n            onChange={this.myChangeHandler}\n          />\n          <input\n            type='submit'\n          />\n        </form>\n      )\n    }else{\n      return (<span>Message Sent</span>)\n    }\n  }\n}\n\n\n\n\n","import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport ecies from 'eth-ecies'\nimport {getContract, contract, w3, users_address, getPrivateMessage, getBlockNumber} from \"./Web3Helper\"\n\n\n\n\n\nwindow.db = {}\nwindow.rec_state = {}\n\n\nconst EC = require(\"elliptic\").ec;\n\nexport default class ReceivedMessages extends React.Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      receivedMessages: [],\n      errormessage: '',\n      keys:{}\n    };\n  }\n  \n  async fetch(){\n    const response = await this.getPrivateMessages()\n    this.setState({receivedMessages: response})\n  }\n  async componentDidMount() {\n    await this.setUpListeners();\n    await this.fetch();\n    window.rec_state = this.state\n\n\n  }\n  async private_message_bob_stage_2(private_message){\n    var bob_reply = {}\n    console.log(\"state2\",this.state);\n    var privateKey = w3.utils.randomHex(32)\n    const ec = new EC(\"secp256k1\");\n    const ephemPrivKey = ec.keyFromPrivate(privateKey);\n    const ephemPubKey = ephemPrivKey.getPublic();\n    const ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode());\n    const pub_key_readable = Buffer.from(ephemPubKey.encode()).toString('hex')\n\n    var bob_public = pub_key_readable\n    bob_reply['bob_public'] = pub_key_readable\n\n    this.state.keys[pub_key_readable]=privateKey\n    window.db[pub_key_readable] = privateKey\n    console.log('window.db',window.db);\n    window.localStorage.setItem(pub_key_readable, privateKey);\n    \n\n    var accounts = await  w3.eth.getAccounts()\n    await window.ethereum.enable()\n    var send = await private_message.methods.bob_reply(pub_key_readable).send({gasPrice:0,from:accounts[0]})\n    console.log(\"state3\",this.state);\n\n  }\n\n  async setUpListeners(){\n    var block_number = await getBlockNumber()\n    var that = this;\n    contract.events.allEvents(\"allEvents\",{\n    \n        fromBlock: 'latest'\n\n    },async function(err,data){\n      console.log(\"event\", data);\n      await that.fetch();\n    });\n  }\n\n  async getPrivateMessages() {\n\n      //set up listeners for new received messages\n\n\n\n\n\n    var messages_count = await contract.methods.get_received_messages_total(users_address).call();\n    var messages = []\n    for(var index = messages_count-1; index >= 0 ;index-- ){\n      var private_message_addr = await contract.methods.get_received_message(users_address,index).call()\n\t\t\tvar private_message = getPrivateMessage(private_message_addr)\n\n\n\n\n\t\t\tvar stage = await private_message.methods.stage().call()\n      var plaintext=''\n\t\t\tvar alice = await private_message.methods.alice().call()\n\t\t\tvar bob = await private_message.methods.bob().call()\n\t\t\tvar bob_public = await private_message.methods.bob_public().call()\n      var encrypted_message = await private_message.methods.encrypted_message().call()\n\n      if (stage == \"1\"){\n        this.private_message_bob_stage_2(private_message);\n      }\n      if(stage == \"3\"){\n        //decrypt using bob eey\n        const ec = new EC(\"secp256k1\");\n        var pub_key_readable = Buffer.from(bob_public,'hex').toString(\"hex\");\n        console.log('should be same kesy bob',bob_public, pub_key_readable)\n        var ethPrivKey = window.localStorage[pub_key_readable];\n        if(ethPrivKey){\n          //try to encrypt and then decrypt (?)\n          var pub = Buffer.from(pub_key_readable.slice(2),'hex');\n          var encrypt = ecies.encrypt(pub, 'test');\n          var pk = ec.keyFromPrivate(ethPrivKey)\n          try{\n          plaintext = ecies.decrypt(pk , Buffer.from(encrypted_message,'hex')).toString();// XXX REAL ONE\n          }catch (e){\n          console.log(e);\n          }\n\n          console.log('plaintext2',plaintext);\n        }\n\n      }\n\n    var message = {plaintext:plaintext,stage:stage,alice:alice,bob:bob, id:index, address: private_message_addr, encrypted_message:encrypted_message, bob_public:bob_public }\n      messages.push(message);\n\n      //var sender = await contract.methods.get_public_message_sender(index).call()\n    }\n    return messages;\n  };\n\n  render() {\n    return (\n<div>\n      <form onSubmit={this.mySubmitHandler}>\n      <p>\n      <label htmlFor=\"address\">Ethereum Address</label>\n      <input\n        type='text'\n        name='address'\n        placeholder=\"0xSatoshi\"\n        onChange={this.myChangeHandler}\n      />\n      </p>\n      <p>\n      <label htmlFor=\"message\">Secret Message</label>\n      <input\n        type='text'\n        name='message'\n        placeholder=\"Secret Message\"\n        onChange={this.myChangeHandler}\n      />\n      </p>\n      <input\n        type='submit'\n      />\n \n      {this.state.errormessage}\n      </form>\n      <p>hi</p>\n        { \n\n\t\t\t\tthis.state.receivedMessages.map(message => \n          <Panel bsStyle=\"info\" key={message.id} className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">\n\t\t\t\t\t\t\t\t\t\t{(() => {\n\t\t\t\t\t\t\t\t\t\t\tswitch (message.stage) {\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"1\":   return \"Key request sent for One Time Use Public Keys.\";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"2\": return \"Waiting on recieving encrypted message \";\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"3\":  return \"Encrypted Message received\" ;\n\t\t\t\t\t\t\t\t\t\t\t\tcase \"4\":  return \"Encrypted Message received and status = Read\";\n\t\t\t\t\t\t\t\t\t\t\t\tdefault:      return \"unknown stage \";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})()}\n\t\t\t\t\t\t</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{message.alice}\n\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{message.plaintext}\n\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{message.encrypted_message}\n\n\t\t\t\t\t\t\t</p>\n            </Panel.Body>\n          </Panel>)\n        }\n</div>\n    );\n  }\n\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport axios from 'axios'\n\n//This Component is a child Component of Customers Component\nexport default class CustomerDetails extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  //Function which is called when the component loads for the first time\n  componentDidMount() {\n    this.getCustomerDetails(this.props.val)\n  }\n\n  //Function which is called whenver the component is updated\n  componentDidUpdate(prevProps) {\n\n    //get Customer Details only if props has changed\n    if (this.props.val !== prevProps.val) {\n      this.getCustomerDetails(this.props.val)\n    }\n  }\n\n  //Function to Load the customerdetails data from json.\n  getCustomerDetails(id) {\n    axios.get('assets/samplejson/customer' + id + '.json').then(response => {\n      this.setState({customerDetails: response})\n    })\n  };\n\n  render() {\n    if (!this.state.customerDetails)\n      return (<p>Loading Data</p>)\n    return (<div className=\"customerdetails\">\n      <Panel bsStyle=\"info\" className=\"centeralign\">\n        <Panel.Heading>\n          <Panel.Title componentClass=\"h3\">{this.state.customerDetails.data.name}</Panel.Title>\n        </Panel.Heading>\n        <Panel.Body>\n          <p>Name : {this.state.customerDetails.data.name}</p>\n          <p>Email : {this.state.customerDetails.data.email}</p>\n          <p>Phone : {this.state.customerDetails.data.phone}</p>\n          <p>City : {this.state.customerDetails.data.city}</p>\n          <p>State : {this.state.customerDetails.data.state}</p>\n          <p>Country : {this.state.customerDetails.data.country}</p>\n          <p>Organization : {this.state.customerDetails.data.organization}</p>\n          <p>Job Profile : {this.state.customerDetails.data.jobProfile}</p>\n          <p>Additional Info : {this.state.customerDetails.data.additionalInfo}</p>\n        </Panel.Body>\n      </Panel>\n    </div>)\n  }\n}\n","import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\n\nimport {getContract, contract, w3} from \"./Web3Helper\"\nimport ReactDOM from 'react-dom';\n\nexport default class SendPublicMessage extends React.Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      errormessage: ''\n    };\n  }\n  mySubmitHandler = async (event) => {\n    event.preventDefault();\n    var account = await  w3.eth.getAccounts()\n\n    var send = await contract.methods.send_public_message(this.state.message).send();//, {from:account}).send({from:account, value:0})\n    return false;\n  }\n\n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    let err = '';\n    if (nam === \"message\") {\n      if (val ==\"\" ) {\n        err = <strong>Your message can't be blank</strong>;\n      }\n    }\n    this.setState({errormessage: err});\n    this.setState({[nam]: val});\n  }\n  render() {\n    return (\n          <Panel bsStyle=\"info\" className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">\n              Send Public Message\n\n\t\t\t\t\t\t</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n              <form onSubmit={this.mySubmitHandler}>\n              <input\n                type='text'\n                name='message'\n                onChange={this.myChangeHandler}\n              />\n              <input\n                type='submit'\n              />\n         \n              {this.state.errormessage}\n              </form>\n            </Panel.Body>\n          </Panel>\n    );\n  }\n}\n\n\n\n","import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport ecies from 'eth-ecies'\n\n//import {getContract, contract, w3, users_address, getPrivateMessage, getBlockNumber} from \"./Web3Helper\"\n\n\nimport {getContract, contract, web3init, getBlockNumber} from \"./Web3Helper\"\n\nexport default class PublicMessages extends React.Component {\n\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      publicMessages:{\n        data: []\n      }\n    };\n  }\n  \n  async setUpListeners(){\n    var block_number = await getBlockNumber()\n    var that = this;\n    contract.events.allEvents(\"allEvents\",{\n    \n        fromBlock: 'latest'\n\n    },async function(err,data){\n      console.log(\"event\", data);\n      await that.fetch();\n    });\n  }\n\n\n  async fetch(){\n    const response = await this.getPublicMessages()\n    this.setState({publicMessages: {\"data\":response}})\n  }\n\n  async componentDidMount() {\n    await this.fetch()\n    await this.setUpListeners();\n  }\n\n  async getPublicMessages() {\n    var messages_count = await contract.methods.get_public_message_count().call();\n    var messages = []\n    for(var index = messages_count-1; index >= 0 ;index-- ){\n      var message = await contract.methods.get_public_message_message(index).call()\n      var sender = await contract.methods.get_public_message_sender(index).call()\n      messages.push({message:message, sender:sender, id:index})\n    }\n    return messages;\n  };\n\n\n  render(){\n          const elements = ['a','b','c'];\n          console.log(\"HERE\");\n          console.log(this.state.publicMessages);\n        return (\n          <div>\n          {\n          this.state.publicMessages.data.map((message,index) => <Panel bsStyle=\"info\" key={message.id} className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">{message.message}</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n              <p>{message.sender}</p>\n            </Panel.Body>\n          </Panel>)\n        \n          }\n        </div>\n        )\n\n\n  }\n  }\n","import React from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport {getContract, contract, w3, users_address, getPrivateMessage, getBlockNumber} from \"./Web3Helper\"\nimport EncryptMessage from './EncryptMessage'\n\nimport ReactDOM from 'react-dom';\n\nexport default class SendPublicMessage extends React.Component {\n  async setUpListeners(){\n    var block_number = await getBlockNumber()\n    var that = this;\n    contract.events.allEvents(\"allEvents\",{\n    \n        fromBlock: block_number,\n        toBlock: 'latest'\n\n    },async function(err,data){\n      console.log(\"LOGGING THAT EVENT PICKED UP NEWS\")\n      await that.getSentMessages();\n    });\n  }\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      sentMessages : [],\n      errormessage: '',\n      account:''\n    };\n  }\n  async componentDidMount() {\n\t\tconsole.log(\"start send private msg\");\n    await this.setUpListeners();\n    const response = await this.getSentMessages()\n    console.log('send messages response is ',response);\n  }\n  async getSentMessages() {\n    var account = await  w3.eth.getAccounts()\n    this.state.account = account;\n    var messages_count = await contract.methods.get_sent_messages_total(users_address).call();\n    var messages = []\n    for(var index = messages_count-1; index >= 0 ;index-- ){\n      var private_message_addr = await contract.methods.get_sent_message(users_address,index).call()\n\t\t\tvar private_message = getPrivateMessage(private_message_addr)\n\t\t\tvar stage = await private_message.methods.stage().call()\n\t\t\tvar alice = await private_message.methods.alice().call()\n\t\t\tvar bob = await private_message.methods.bob().call()\n      var message = {stage:stage,alice:alice,bob:bob, id:index}\n      if (stage == \"2\"){\n        var bob_public = await private_message.methods.bob_public().call()\n        message['bob_public']=bob_public\n      }\n      message['address']=private_message_addr\n      message['id'] = index;\n      if(stage==1){\n      }\n      messages.push(message);\n    }\n    this.setState({sentMessages: messages})\n    return messages;\n  };\n  mySubmitHandler = async (event) => {\n    event.preventDefault();\n    var account = await  w3.eth.getAccounts()\n    var send = await contract.methods.pm_init(this.state.address).send({gasPrice:0,from:account[0]});\n    return false;\n  }\n\n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    let err = '';\n    if (nam === \"message\") {\n      if (val ==\"\" ) {\n        err = <strong>Your message can't be blank</strong>;\n      }\n    }\n    this.setState({errormessage: err});\n    this.setState({[nam]: val});\n  }\n  render() {\n    return (\n    <div>\n    <p>\n    hi {this.state.account}\n    </p>\n      <form onSubmit={this.mySubmitHandler}>\n      <div>\n      <label htmlFor=\"address\">Ethereum Address</label>\n      <input\n        type='text'\n        name='address'\n        placeholder=\"0xSatoshi\"\n        onChange={this.myChangeHandler}\n      />\n      </div>\n      <input\n        type='submit'\n      />\n \n      {this.state.errormessage}\n      </form>\n        <div>\n        { this.state.sentMessages.map(message => \n      <EncryptMessage message={message} key={message.id}/>\n          \n          )\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\n","import React, {Component} from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport Button from 'react-bootstrap/lib/Button'\nimport CustomerDetails from './CustomerDetails'\nimport SendPublicMessage from \"./SendPublicMessage\"\nimport PublicMessages from \"./PublicMessages\"\nimport SendPrivateMessage from './SendPrivateMessage'\nimport ReceivedMessages from './ReceivedMessages'\n\nimport {getContract, contract, web3init} from \"./Web3Helper\"\n\nexport default class Arts extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n  }\n\n  //function which is called the first time the component loads\n  async componentDidMount() {\n    await web3init();\n\n    const response = await this.getPublicMessages()\n    console.log('response is ',response);\n    this.setState({publicMessages: {\"data\":response}})\n  }\n\n  //Function to get the Art Data from json\n  async getPublicMessages() {\n    var messages_count = await contract.methods.get_public_message_count().call();\n    console.log(\"messages count\", messages_count);\n    var messages = []\n    var counter=0;\n    for(var index = messages_count-1; index >= 0 ;index-- ){\n      counter+=1;\n      if(counter ==5){break;}\n      console.log(\"index is\", index)\n      var message = await contract.methods.get_public_message_message(index).call()\n      var sender = await contract.methods.get_public_message_sender(index).call()\n      messages.push({message:message, sender:sender, id:index})\n    }\n    return messages;\n  };\n\n  render() {\n    if (!this.state.publicMessages)\n      return (<p>Loading data</p>)\n    return (<div className=\"addmargin\">\n      <div className=\"col-md-4\">\n      <div>\n      <SendPublicMessage />\n      <PublicMessages />\n      </div>\n        </div>\n      <div className=\"col-md-4\">\n      <p>Send Private Message</p>\n      <SendPrivateMessage />\n      </div>\n      <div className=\"col-md-4\">\n      <p>Incoming Private Messages</p>\n      <ReceivedMessages />\n      </div>\n    </div>)\n  }\n\n}\n\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Txtrs from './Txtrs'\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\n\n\nclass App extends Component {\n  render() {\n    console.log(\"Host URL\"+process.env.PUBLIC_URL);\n    return (\n\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Txt.rs.2.1</h1>\n          <h3 className=\"App-subtitle\">Connect <a href=\"http://metamask.io\" target=\"_blank\">Metamask.io</a> to the MaticV3 testnet</h3>\n          <h4 className=\"App-subtitle\"> https://testnetv3.matic.network/ </h4> \n        </header>\n       <Route exact path='/' component={Txtrs} />\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","import Web3 from 'web3'\n\n\nimport abi from './abi_txtrs.json'\nimport abi_private_message from './abi_private_message.json'\nconsole.log(abi_private_message);\n\nconst EC = require(\"elliptic\").ec;\nconst ec = new EC(\"secp256k1\");\nexport var w3 = new Web3(window.ethereum);\nvar contract_address = \"0xA8ADF136F81AD056448ec5Be5BAED18c8a785fBa\";\n  \nexport var users_address;\n\nwindow.w3 = w3;\n\nexport const  contract =  new w3.eth.Contract(abi, contract_address);\n\nexport function getContract(){\n  return contract; \n}\nexport function getPrivateMessage(addr){\n\treturn  new w3.eth.Contract(abi_private_message, addr);\n}\nexport function getBlockNumber(addr){\n\treturn  new w3.eth.getBlockNumber();\n}\n\nexport async function web3init(){\n  await window.ethereum.enable();//'https://rpc.goerli.mudit.blog/');\n  var account = await  w3.eth.getAccounts()\n  contract.options.from=account[0]\n\tusers_address = account[0];\n}\n\n"],"sourceRoot":""}